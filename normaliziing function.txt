// Date normalization function to convert various date formats to MM/DD/YYYY
const normalizeDateInQuery = (query) => {
    // Define regex patterns for different date formats
    const datePatterns = [
        // Month names (full and abbreviated) with day and year
        {
            pattern: /\b(january|jan|february|feb|march|mar|april|apr|may|june|jun|july|jul|august|aug|september|sep|october|oct|november|nov|december|dec)\s+(\d{1,2})(?:st|nd|rd|th)?,?\s+(\d{4}|\d{2})\b/gi,
            handler: (match, month, day, year) => {
                const monthMap = {
                    'january': '01', 'jan': '01',
                    'february': '02', 'feb': '02',
                    'march': '03', 'mar': '03',
                    'april': '04', 'apr': '04',
                    'may': '05',
                    'june': '06', 'jun': '06',
                    'july': '07', 'jul': '07',
                    'august': '08', 'aug': '08',
                    'september': '09', 'sep': '09',
                    'october': '10', 'oct': '10',
                    'november': '11', 'nov': '11',
                    'december': '12', 'dec': '12'
                };
                const normalizedMonth = monthMap[month.toLowerCase()];
                const normalizedDay = day.padStart(2, '0');
                const normalizedYear = year.length === 2 ? `20${year}` : year;
                return `${normalizedMonth}/${normalizedDay}/${normalizedYear}`;
            }
        },
        // DD/MM/YYYY or DD-MM-YYYY format
        {
            pattern: /\b(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})\b/g,
            handler: (match, first, second, year) => {
                // Assume MM/DD/YYYY format (US standard)
                const month = first.padStart(2, '0');
                const day = second.padStart(2, '0');
                return `${month}/${day}/${year}`;
            }
        },
        // YYYY-MM-DD format (ISO)
        {
            pattern: /\b(\d{4})[\/\-](\d{1,2})[\/\-](\d{1,2})\b/g,
            handler: (match, year, month, day) => {
                const normalizedMonth = month.padStart(2, '0');
                const normalizedDay = day.padStart(2, '0');
                return `${normalizedMonth}/${normalizedDay}/${year}`;
            }
        },
        // Month DD format (current year assumed)
        {
            pattern: /\b(january|jan|february|feb|march|mar|april|apr|may|june|jun|july|jul|august|aug|september|sep|october|oct|november|nov|december|dec)\s+(\d{1,2})(?:st|nd|rd|th)?\b/gi,
            handler: (match, month, day) => {
                const monthMap = {
                    'january': '01', 'jan': '01',
                    'february': '02', 'feb': '02',
                    'march': '03', 'mar': '03',
                    'april': '04', 'apr': '04',
                    'may': '05',
                    'june': '06', 'jun': '06',
                    'july': '07', 'jul': '07',
                    'august': '08', 'aug': '08',
                    'september': '09', 'sep': '09',
                    'october': '10', 'oct': '10',
                    'november': '11', 'nov': '11',
                    'december': '12', 'dec': '12'
                };
                const normalizedMonth = monthMap[month.toLowerCase()];
                const normalizedDay = day.padStart(2, '0');
                const currentYear = new Date().getFullYear();
                return `${normalizedMonth}/${normalizedDay}/${currentYear}`;
            }
        },
        // MM/DD format (current year assumed)
        {
            pattern: /\b(\d{1,2})[\/\-](\d{1,2})\b/g,
            handler: (match, month, day) => {
                const normalizedMonth = month.padStart(2, '0');
                const normalizedDay = day.padStart(2, '0');
                const currentYear = new Date().getFullYear();
                return `${normalizedMonth}/${normalizedDay}/${currentYear}`;
            }
        }
    ];

    let normalizedQuery = query;

    // Apply each pattern to normalize dates
    datePatterns.forEach(({ pattern, handler }) => {
        normalizedQuery = normalizedQuery.replace(pattern, handler);
    });

    return normalizedQuery;
};
